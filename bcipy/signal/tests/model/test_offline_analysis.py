"""Integration test of offline_analysis.py (slow)"""
import gzip
import random
import re
import shutil
import tempfile
import unittest
from pathlib import Path

import numpy as np
import pytest

from bcipy.config import (DEFAULT_DEVICE_SPEC_FILENAME,
                          DEFAULT_PARAMETERS_FILENAME, RAW_DATA_FILENAME,
                          TRIGGER_FILENAME)
from bcipy.io.load import load_json_parameters
from bcipy.signal.model.offline_analysis import offline_analysis

pwd = Path(__file__).absolute().parent
input_folder = pwd / "integration_test_input"
expected_output_folder = pwd / "integration_test_expected_output"  # global for the purpose of pytest-mpl decorator


@pytest.mark.slow
class TestOfflineAnalysisEEG(unittest.TestCase):
    """Integration test of offline_analysis.py for EEG data(slow)

    This test is slow because it runs the full offline analysis pipeline and compares its' output
    to a set of expected outputs. The expected outputs are generated by running the pipeline on
    the same input data and saving them to the expected_output_folder. See the main `signal` module
    README.md for more information. The test will fail if the the auc is not within 0.005 of the expected auc.

    To run this test, run the following command from the root of the bcipy repo:
        `python bcipy/signal/tests/model/test_offline_analysis.py`
    """

    @classmethod
    def setUpClass(cls):
        np.random.seed(0)
        random.seed(0)
        cls.tmp_dir = Path(tempfile.mkdtemp())

        eeg_input_folder = input_folder / "eeg"

        # expand raw_data.csv.gz into tmp_dir
        with gzip.open(eeg_input_folder / "raw_data.csv.gz", "rb") as f_source:
            with open(cls.tmp_dir / f"{RAW_DATA_FILENAME}.csv", "wb") as f_dest:
                shutil.copyfileobj(f_source, f_dest)

        # copy the other required inputs into tmp_dir
        shutil.copyfile(eeg_input_folder / TRIGGER_FILENAME, cls.tmp_dir / TRIGGER_FILENAME)
        shutil.copyfile(eeg_input_folder / DEFAULT_DEVICE_SPEC_FILENAME, cls.tmp_dir / DEFAULT_DEVICE_SPEC_FILENAME)

        params_path = pwd.parent.parent.parent / "parameters" / DEFAULT_PARAMETERS_FILENAME
        cls.parameters = load_json_parameters(params_path, value_cast=True)
        models = offline_analysis(
            str(cls.tmp_dir),
            cls.parameters,
            save_figures=False,
            show_figures=False,
            alert=False)
        # only one model is generated using the default parameters
        cls.model: SignalModel = models[0]

    @classmethod
    def tearDownClass(cls):
        shutil.rmtree(cls.tmp_dir)

    @staticmethod
    def get_auc(model_filename):
        match = re.search("^model_eeg_([.0-9]+).pkl$", model_filename)
        if not match:
            raise ValueError()
        return float(match[1])

    def test_model_auc(self):
        expected_auc = self.get_auc(list(expected_output_folder.glob("model_eeg_*.pkl"))[0].name)
        found_auc = self.get_auc(list(self.tmp_dir.glob("model_eeg_*.pkl"))[0].name)
        self.assertAlmostEqual(expected_auc, found_auc, delta=0.005)

    def test_model_metadata_loads(self):
        self.assertIsNotNone(self.model.metadata)
        self.assertAlmostEqual(
            self.model.metadata.auc, self.get_auc(
                list(expected_output_folder.glob("model_eeg_*.pkl"))[0].name), delta=0.005)
        self.assertIsNotNone(self.model.metadata.transform)


@pytest.mark.slow
class TestOfflineAnalysisET(unittest.TestCase):
    """Integration test of offline_analysis.py eye tracker data (slow)

    This test is slow because it runs the full offline analysis pipeline and compares its' output
    to a set of expected outputs. The expected outputs are generated by running the pipeline on
    the same input data and saving them to the expected_output_folder. See the main `signal` module
    README.md for more information  The test will fail if the acc is not within 0.005 of the expected acc.
    """

    @classmethod
    def setUpClass(cls):
        np.random.seed(0)
        random.seed(0)
        cls.tmp_dir = Path(tempfile.mkdtemp())

        eye_tracking_input_folder = input_folder / "et"
        file_loc = eye_tracking_input_folder / "eyetracker_data_tobii-p0.csv.gz"

        # expand eyetracker_data_tobii.csv.gz into tmp_dir
        with gzip.open(file_loc, "rb") as f_source:
            with open(cls.tmp_dir / "eyetracker_data_tobii-p0.csv", "wb") as f_dest:
                shutil.copyfileobj(f_source, f_dest)

        # copy the other required inputs into tmp_dir
        shutil.copyfile(eye_tracking_input_folder / TRIGGER_FILENAME, cls.tmp_dir / TRIGGER_FILENAME)
        shutil.copyfile(
            eye_tracking_input_folder /
            DEFAULT_DEVICE_SPEC_FILENAME,
            cls.tmp_dir /
            DEFAULT_DEVICE_SPEC_FILENAME)

        params_path = pwd.parent.parent.parent / "parameters" / DEFAULT_PARAMETERS_FILENAME
        cls.parameters = load_json_parameters(params_path, value_cast=True)
        models = offline_analysis(
            str(cls.tmp_dir),
            cls.parameters,
            save_figures=False,
            show_figures=False,
            alert=False)
        # only one model is generated using the default parameters
        cls.model = models[0]

    @classmethod
    def tearDownClass(cls):
        shutil.rmtree(cls.tmp_dir)

    @staticmethod
    def get_acc(model_filename):
        match = re.search("^model_eyetracker_([.0-9]+).pkl$", model_filename)
        if not match:
            match = re.search("^model_eyetracker_None.pkl$", model_filename)
            if not match:
                raise ValueError()
            return None
        return float(match[1])

    def test_model_acc(self):
        expected_auc = self.get_acc(list(expected_output_folder.glob("model_eyetracker_*.pkl"))[0].name)
        found_auc = self.get_acc(list(self.tmp_dir.glob("model_eyetracker_*.pkl"))[0].name)
        self.assertAlmostEqual(expected_auc, found_auc, delta=0.005)


@pytest.mark.slow
class TestOfflineAnalysisFusion(unittest.TestCase):
    """Integration test of offline_analysis.py fusion (slow)

    This test is slow because it runs the full offline analysis pipeline and compares its' output
    to a set of expected outputs. The expected outputs are generated by running the pipeline on
    the same input data and saving them to the expected_output_folder. See the main `signal` module
    README.md for more information

    The test will fail if the acc is not within 0.005 of the expected acc or if the auc is not within
    0.005 of the expected auc.
    """

    @classmethod
    def setUpClass(cls):
        np.random.seed(0)
        random.seed(0)
        cls.tmp_dir = Path(tempfile.mkdtemp())

        fusion_input_folder = input_folder / "fusion"
        et_input_folder = input_folder / "et"
        eye_tracking_file_loc = et_input_folder / "eyetracker_data_tobii-p0.csv.gz"
        eeg_file_loc = fusion_input_folder / "raw_data.csv.gz"

        # expand raw_data.csv.gz into tmp_dir
        with gzip.open(eeg_file_loc, "rb") as f_source:
            with open(cls.tmp_dir / f"{RAW_DATA_FILENAME}.csv", "wb") as f_dest:
                shutil.copyfileobj(f_source, f_dest)

        # expand eyetracker_data_tobii.csv.gz into tmp_dir
        with gzip.open(eye_tracking_file_loc, "rb") as f_source:
            with open(cls.tmp_dir / "eyetracker_data_tobii-p0.csv", "wb") as f_dest:
                shutil.copyfileobj(f_source, f_dest)

        # copy the other required inputs into tmp_dir
        shutil.copyfile(et_input_folder / TRIGGER_FILENAME, cls.tmp_dir / TRIGGER_FILENAME)
        shutil.copyfile(fusion_input_folder / DEFAULT_DEVICE_SPEC_FILENAME, cls.tmp_dir / DEFAULT_DEVICE_SPEC_FILENAME)

        params_path = pwd.parent.parent.parent / "parameters" / DEFAULT_PARAMETERS_FILENAME
        cls.parameters = load_json_parameters(params_path, value_cast=True)
        models = offline_analysis(
            str(cls.tmp_dir),
            cls.parameters,
            save_figures=False,
            show_figures=False,
            alert=False)
        # only one model is generated using the default parameters
        cls.models = models

        cls.output_folder = expected_output_folder / "fusion"

    @classmethod
    def tearDownClass(cls):
        shutil.rmtree(cls.tmp_dir)

    @staticmethod
    def get_acc(model_filename):
        match = re.search("^model_eyetracker_([.0-9]+).pkl$", model_filename)
        if not match:
            match = re.search("^model_eyetracker_None.pkl$", model_filename)
            if not match:
                raise ValueError()
            return None
        return float(match[1])

    @staticmethod
    def get_auc(model_filename):
        match = re.search("^model_eeg_([.0-9]+).pkl$", model_filename)
        if not match:
            raise ValueError()
        return float(match[1])

    def test_model_acc(self):
        expected_auc = self.get_acc(list(self.output_folder.glob("model_eyetracker_*.pkl"))[0].name)
        found_auc = self.get_acc(list(self.tmp_dir.glob("model_eyetracker_*.pkl"))[0].name)
        self.assertAlmostEqual(expected_auc, found_auc, delta=0.005)

    def test_model_auc(self):
        expected_auc = self.get_auc(list(self.output_folder.glob("model_eeg_*.pkl"))[0].name)
        found_auc = self.get_auc(list(self.tmp_dir.glob("model_eeg_*.pkl"))[0].name)
        self.assertAlmostEqual(expected_auc, found_auc, delta=0.005)


if __name__ == "__main__":
    unittest.main()
